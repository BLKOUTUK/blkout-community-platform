var y=Object.defineProperty,h=Object.defineProperties;var b=Object.getOwnPropertyDescriptors;var v=Object.getOwnPropertySymbols;var m=Object.prototype.hasOwnProperty,E=Object.prototype.propertyIsEnumerable;var l=(n,e,t)=>e in n?y(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t,d=(n,e)=>{for(var t in e||(e={}))m.call(e,t)&&l(n,t,e[t]);if(v)for(var t of v(e))E.call(e,t)&&l(n,t,e[t]);return n},f=(n,e)=>h(n,b(e));var u=(n,e,t)=>l(n,typeof e!="symbol"?e+"":e,t);var i=(n,e,t)=>new Promise((s,r)=>{var g=a=>{try{o(t.next(a))}catch(c){r(c)}},p=a=>{try{o(t.throw(a))}catch(c){r(c)}},o=a=>a.done?s(a.value):Promise.resolve(a.value).then(g,p);o((t=t.apply(n,e)).next())});class w{constructor(){u(this,"baseURL");u(this,"fallbackEvents");this.baseURL="https://api.blkoutcollective.org/v1/events",this.fallbackEvents=this.generateLiveEvents()}generateLiveEvents(){return console.log("ðŸ”„ Events API not available - showing empty state until real events are added"),[]}getEvents(){return i(this,null,function*(){try{const e=yield fetch(this.baseURL,{method:"GET",headers:{"Content-Type":"application/json","X-Liberation-Platform":"events-request"}});if(e.ok){const t=yield e.json();return Array.isArray(t)?t:this.fallbackEvents}}catch(e){console.log("Using live fallback events (API not yet available):",e)}return this.fallbackEvents})}submitEvent(e){return i(this,null,function*(){try{const s=yield fetch(this.baseURL,{method:"POST",headers:{"Content-Type":"application/json","X-Liberation-Platform":"event-submission"},body:JSON.stringify(e)});if(s.ok)return yield s.json()}catch(s){console.log("API submission failed, using local processing:",s)}const t=f(d({},e),{id:`event-${Date.now()}`,status:"upcoming",created:new Date().toISOString(),updated:new Date().toISOString()});return this.fallbackEvents.unshift(t),{success:!0,eventId:t.id,message:"Event submitted successfully! It will be reviewed by the community organizing team."}})}updateRSVP(e,t){return i(this,null,function*(){try{const r=yield fetch(`${this.baseURL}/${e}/rsvp`,{method:"POST",headers:{"Content-Type":"application/json","X-Liberation-Platform":"rsvp-update"},body:JSON.stringify({action:t})});if(r.ok)return yield r.json()}catch(r){console.log("RSVP update failed, using local processing:",r)}const s=this.fallbackEvents.find(r=>r.id===e);if(s&&s.registration.currentAttendees!==void 0){if(t==="register"&&s.registration.currentAttendees<(s.registration.capacity||1/0))return s.registration.currentAttendees++,{success:!0,message:"Successfully registered for event!"};if(t==="unregister"&&s.registration.currentAttendees>0)return s.registration.currentAttendees--,{success:!0,message:"Successfully unregistered from event."}}return{success:!1,message:"Unable to update registration."}})}getEventsByType(e){return i(this,null,function*(){return(yield this.getEvents()).filter(s=>s.type===e)})}getUpcomingEvents(){return i(this,null,function*(){const e=yield this.getEvents(),t=new Date;return e.filter(s=>new Date(s.date)>t&&s.status==="upcoming").sort((s,r)=>new Date(s.date).getTime()-new Date(r.date).getTime())})}}const A=new w;export{A as eventsAPI};
